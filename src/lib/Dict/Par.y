-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Dict.Par
  ( happyError
  , myLexer
  , pDictionary
  , pListEntry
  , pListArg
  , pListTerm
  , pEntry
  , pTerm
  , pArg
  ) where

import Prelude

import qualified Dict.Abs
import Dict.Lex

}

%name pDictionary Dictionary
%name pListEntry ListEntry
%name pListArg ListArg
%name pListTerm ListTerm
%name pEntry Entry
%name pTerm Term
%name pArg Arg
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('      { PT _ (TS _ 1) }
  ')'      { PT _ (TS _ 2) }
  ','      { PT _ (TS _ 3) }
  ';'      { PT _ (TS _ 4) }
  '{'      { PT _ (TS _ 5) }
  '}'      { PT _ (TS _ 6) }
  L_Ident  { PT _ (TV $$)  }
  L_integ  { PT _ (TI $$)  }
  L_quoted { PT _ (TL $$)  }

%%

Ident :: { Dict.Abs.Ident }
Ident  : L_Ident { Dict.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Dictionary :: { Dict.Abs.Dictionary }
Dictionary : ListEntry { Dict.Abs.Dict $1 }

ListEntry :: { [Dict.Abs.Entry] }
ListEntry : {- empty -} { [] } | Entry ';' ListEntry { (:) $1 $3 }

ListArg :: { [Dict.Abs.Arg] }
ListArg : {- empty -} { [] } | Arg ListArg { (:) $1 $2 }

ListTerm :: { [Dict.Abs.Term] }
ListTerm
  : {- empty -} { [] }
  | Term { (:[]) $1 }
  | Term ',' ListTerm { (:) $1 $3 }

Entry :: { Dict.Abs.Entry }
Entry
  : Ident ListArg { Dict.Abs.E $1 $2 }
  | Ident ListArg '{' ListTerm '}' { Dict.Abs.EA $1 $2 $4 }

Term :: { Dict.Abs.Term }
Term
  : Ident '(' ListTerm ')' { Dict.Abs.TermC $1 $3 }
  | Arg { Dict.Abs.TermA $1 }

Arg :: { Dict.Abs.Arg }
Arg
  : Ident { Dict.Abs.NId $1 }
  | Integer { Dict.Abs.NArg $1 }
  | String { Dict.Abs.NStr $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

