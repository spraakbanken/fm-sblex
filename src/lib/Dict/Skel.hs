-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Dict.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Dict.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Dict.Abs.Ident -> Result
transIdent x = case x of
  Dict.Abs.Ident string -> failure x

transDictionary :: Dict.Abs.Dictionary -> Result
transDictionary x = case x of
  Dict.Abs.Dict entrys -> failure x

transEntry :: Dict.Abs.Entry -> Result
transEntry x = case x of
  Dict.Abs.E ident args -> failure x
  Dict.Abs.EA ident args terms -> failure x

transTerm :: Dict.Abs.Term -> Result
transTerm x = case x of
  Dict.Abs.TermC ident terms -> failure x
  Dict.Abs.TermA arg -> failure x

transArg :: Dict.Abs.Arg -> Result
transArg x = case x of
  Dict.Abs.NId ident -> failure x
  Dict.Abs.NArg integer -> failure x
  Dict.Abs.NStr string -> failure x
